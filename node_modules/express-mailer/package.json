{
  "name": "express-mailer",
  "version": "0.1.1",
  "description": "Send Emails from your express application",
  "homepage": "https://github.com/RGBboy/express-mailer",
  "keywords": [
    "express",
    "email",
    "mail",
    "smtp"
  ],
  "author": {
    "name": "RGBboy",
    "email": "me@rgbboy.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/RGBboy/express-mailer"
  },
  "main": "index",
  "engines": {
    "node": "0.8.x"
  },
  "dependencies": {
    "nodemailer": "0.3.x"
  },
  "devDependencies": {
    "express": "3.0.x",
    "jade": "0.27.x",
    "mocha": "1.5.x",
    "superagent": "0.9.x",
    "should": "1.2.x",
    "sinon": "1.4.x",
    "rewire": "1.0.x",
    "test-mailbox": "0.0.x"
  },
  "scripts": {
    "test": "make test",
    "unit": "make unit",
    "spec": "make spec"
  },
  "readme": "# express-mailer\n\nSend Emails from the response object.\n\n[![Build Status](https://secure.travis-ci.org/RGBboy/express-mailer.png)](http://travis-ci.org/RGBboy/express-mailer)\n\n## Note\n\nIf you have updated express-mailer from Version 0.0.2 or earlier there \nhave been major API changes. Express Mailer now uses the extension \npattern and acts off the application object. Usage instructions are \ndetailed below. The change now allows you to send emails from outside of \nyour routes. For example you could now emit an event from your model and \nhave your application respond with an email.\n\n## Installation\n\nWorks with Express 3.0.x\n\n    $ npm install express-mailer\n\n## Usage\n\nExpress Mailer extends your express application\n\n```javascript\n// project/app.js\n\nvar app = require('express')(),\n    mailer = require('express-mailer');\n\nmailer.extend(app, {\n  from: 'no-reply@example.com',\n  host: 'smtp.gmail.com', // hostname\n  secureConnection: true, // use SSL\n  port: 465, // port for secure SMTP\n  auth: {\n    user: 'gmail.user@gmail.com',\n    pass: 'userpass'\n});\n\n```\n\n## Views\n\nMailer views use the same render process as Express. You can use any view engine that Express supports.\nSetting up views for mailer is exactly the same as setting up views for Express. For example, to set the\nview directory to `project/views` and view engine to `jade` you would write:\n\n```javascript\n// project/app.js\n\napp.set('views', __dirname + '/views');\napp.set('view engine', 'jade');\n```\n\nThen we can write our templates in Jade:\n\n```javascript\n// project/views/email.jade\n\n!!! transitional\nhtml\n  head\n    meta(http-equiv = 'Content-Type', content = 'text/html; charset=UTF-8')\n    title= subject\n    body\n      h1.h1 Lorem ipsum\n      p\n        strong Lorem ipsum dolor: \n        | Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        br\n        |Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      h2.h2 Lorem ipsum\n      p Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      p Lorem ipsum:\n      ol\n        li Lorem ipsum dolor\n        li Lorem ipsum dolor\n        li Lorem ipsum dolor\n```\n\n## Sending an email\n\nYou can send an email by calling `app.sendEmail(template, options, callback)`.\nTo send an email using the template above you could write:\n\n```javascript\napp.get('/', function (req, res, next) {\n  app.sendEmail('email', {\n    to: 'example@example.com', // REQUIRED. This can be a comma delimited string just like a normal email to field. \n    subject: 'Test Email', // REQUIRED.\n    otherProperty: 'Other Property' // All additional properties are also passed to the template as local variables.\n  }, function (err) {\n    if (err) {\n      // handle error\n      console.log(err);\n      res.send('There was an error sending the email');\n      return;\n    }\n    res.send('Email Sent');\n  });\n});\n```\n\nYou can also send an email by calling `res.sendEmail(template, options, callback)`.\nTo send an email using the template above you could write:\n\n```javascript\napp.get('/', function (req, res, next) {\n  res.sendEmail('email', {\n    to: 'example@example.com', // REQUIRED. This can be a comma delimited string just like a normal email to field. \n    subject: 'Test Email', // REQUIRED.\n    otherProperty: 'Other Property' // All additional properties are also passed to the template as local variables.\n  }, function (err) {\n    if (err) {\n      // handle error\n      console.log(err);\n      res.send('There was an error sending the email');\n      return;\n    }\n    res.send('Email Sent');\n  });\n});\n```\n\n## Notes\n\nMailchimp has a bunch of templates that may be a good starting point.\nCheck them out at https://github.com/mailchimp/Email-Blueprints\n\n## To Do\n\n* Add ability to curry the from address.\n* Add checking of options when .sendEmail is called.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 RGBboy &lt;me@rgbboy.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "readme.md",
  "_id": "express-mailer@0.1.1",
  "dist": {
    "shasum": "901e6186cc878a6ab4173c2b060403b6df5220c7"
  },
  "_from": "express-mailer@",
  "_resolved": "https://registry.npmjs.org/express-mailer/-/express-mailer-0.1.1.tgz"
}
